name: Build Publish Backend

on:
  push:
    branches: ["main"]
    paths:
      - "python-api/**"
      - ".github/workflows/test.yml"
  workflow_dispatch:
    inputs:
      dockerhub_namespace:
        description: "Namespace de Docker Hub"
        required: false
        default: "marianora"

permissions:
  contents: read

env:
  DOCKERHUB_NAMESPACE: marianora

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: python-api
            image: dott-python
            context: python-api
            dockerfile: python-api/Dockerfile
            cache_scope: python-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolver namespace
        id: ns
        env:
          IN_NS: ${{ github.event.inputs.dockerhub_namespace }}
          VAR_NS: ${{ vars.DOCKERHUB_NAMESPACE }}
          ENV_NS: ${{ env.DOCKERHUB_NAMESPACE }}
        run: |
          NS="${IN_NS:-${VAR_NS:-${ENV_NS}}}"
          echo "namespace=$NS" >> "$GITHUB_OUTPUT"
          if [ -z "$NS" ]; then
            echo "‚ö†Ô∏è No se detect√≥ NAMESPACE; se usar√° repo sin namespace (solo build local / PR)."
          else
            echo "Usando NAMESPACE=$NS"
          fi

      # üëâ Derivar coords y tags ANTES del build
      - name: Derive image coordinates & tags base
        id: vars
        run: |
          if [ -n "${{ steps.ns.outputs.namespace }}" ]; then
            REPO="${{ steps.ns.outputs.namespace }}/${{ matrix.image }}"
          else
            REPO="${{ matrix.image }}"
          fi
          echo "IMAGE_REPO=$REPO" >> $GITHUB_ENV
          echo "SHA_TAG=${REPO}:${GITHUB_SHA::7}" >> $GITHUB_ENV

          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ] && [ -n "${{ steps.ns.outputs.namespace }}" ]; then
            echo "EDGE_TAG=${REPO}:edge" >> $GITHUB_ENV
          else
            echo "EDGE_TAG=" >> $GITHUB_ENV
          fi

          if [[ "${{ github.ref }}" == refs/tags/v* ]] && [ -n "${{ steps.ns.outputs.namespace }}" ]; then
            VERSION="${{ github.ref_name }}"
            echo "SEMVER_TAG=${REPO}:${VERSION#v}" >> $GITHUB_ENV
          else
            echo "SEMVER_TAG=" >> $GITHUB_ENV
          fi

      - name: Docker meta (labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          flavor: latest=false
          labels: |
            org.opencontainers.image.title=${{ matrix.image }}
            org.opencontainers.image.description=${{ matrix.name }} image
            org.opencontainers.image.url=https://hub.docker.com/r/${{ steps.ns.outputs.namespace || 'library' }}/${{ matrix.image }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # üëá Construir lista de tags sin vac√≠os (evita "tag is needed...")
      - name: Prepare tags
        id: prep
        run: |
          T="${{ env.SHA_TAG }}"
          [ -n "${{ env.EDGE_TAG }}" ] && T="$T,${{ env.EDGE_TAG }}"
          [ -n "${{ env.SEMVER_TAG }}" ] && T="$T,${{ env.SEMVER_TAG }}"
          echo "tags=$T" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx (driver=docker)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Login to Docker Hub (solo si se va a pushear)
        if: ${{ github.event_name != 'pull_request' && steps.ns.outputs.namespace != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & (opcional) Push
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' && steps.ns.outputs.namespace != '' }}
          # load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          pull: true
          provenance: false
          sbom: false
          # ‚ö†Ô∏è Sin cache-to/cache-from con driver=docker

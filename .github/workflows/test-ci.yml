name: CI (lint, test, build, scan)

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  DOCKERHUB_NAMESPACE: marianora           # EDITA: tu namespace en Docker Hub
  PLATFORMS: linux/amd64
  CACHE_MODE: max
  TRIVY_SEVERITY: CRITICAL
  TRIVY_IGNORE_UNFIXED: true

jobs:
  lint_test:
    name: Lint & Test (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # back: NestJS (Node 20)
          - name: back
            context: back
            type: node
            node_version: "20"
            lint_cmd: "npm run lint --silent || npx eslint ."
            test_cmd: "npm test --silent || node --test"
          # dott-front: React/Vite/Next/etc (Node 20)
          - name: dott-front
            context: dott-front
            type: node
            node_version: "20"
            lint_cmd: "npm run lint --silent || npx eslint ."
            test_cmd: "npm test --silent || node --test"
          # python-api (FastAPI/Flask/etc) Python 3.11
          - name: python-api
            context: python-api
            type: python
            python_version: "3.11"
            lint_cmd: "flake8 ."
            test_cmd: "pytest -q"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Python
      - name: Setup Python
        if: matrix.type == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ matrix.context }}/requirements.txt
            ${{ matrix.context }}/requirements-dev.txt

      - name: Install deps (Python)
        if: matrix.type == 'python'
        working-directory: ${{ matrix.context }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest flake8

      # Node
      - name: Setup Node
        if: matrix.type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.context }}/package-lock.json

      - name: Install deps (Node)
        if: matrix.type == 'node'
        working-directory: ${{ matrix.context }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          npm i -D eslint || true

      - name: Lint
        working-directory: ${{ matrix.context }}
        run: ${{ matrix.lint_cmd }}

      - name: Test
        working-directory: ${{ matrix.context }}
        run: ${{ matrix.test_cmd }}

  build_scan_push:
    name: Build, Scan & (Push en main) (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: [ lint_test ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: back
            context: back
            dockerfile: back/Dockerfile
          - name: dott-front
            context: dott-front
            dockerfile: dott-front/Dockerfile
          - name: python-api
            context: python-api
            dockerfile: python-api/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive vars (tags & push flag)
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          REPO="${{ env.DOCKERHUB_NAMESPACE }}/${{ matrix.name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TAGS="${REPO}:pr-${{ github.event.pull_request.number }}-${GITHUB_SHA::7}"
            PUSH=false
            SCAN_REF="${TAGS}"
          else
            TAGS="${REPO}:edge
          ${REPO}:${GITHUB_SHA::7}"
            PUSH=true
            SCAN_REF="${REPO}:${GITHUB_SHA::7}"
          fi
          echo "IMAGE_REPO=${REPO}" >> $GITHUB_ENV
          printf "TAGS<<EOF\n%s\nEOF\n" "${TAGS}" >> $GITHUB_ENV
          echo "PUSH=${PUSH}" >> $GITHUB_ENV
          echo "SCAN_REF=${SCAN_REF}" >> $GITHUB_ENV

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          flavor: latest=false
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.name }} image
            org.opencontainers.image.url=https://hub.docker.com/r/${{ env.DOCKERHUB_NAMESPACE }}/${{ matrix.name }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Login to Docker Hub (only on main)
        if: env.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (load) for scan
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}

name: Publish python-api image

on:
  push:
    branches: ["main"]      # publica solo al mergear a main
    paths:
      - "python-api/**"
      - ".github/workflows/python-ci.yml"
    tags:
      - "v*"
  pull_request:
    branches: ["main"]      # en PR solo construye (sin push)
    paths:
      - "python-api/**"
      - ".github/workflows/python-ci.yml"
  workflow_dispatch:
    inputs:
      dockerfile_dir:
        description: "Carpeta donde está el Dockerfile"
        required: false
        default: "python-api"
      dockerhub_namespace:
        description: "Namespace de Docker Hub (usuario/organización)"
        required: false
        default: "marianora"
      image_name:
        description: "Nombre de imagen (si vacío usa el nombre del repo)"
        required: false
        default: ""

env:
  # ⚠️ Podés sobreescribir estos por Variables del repo (Settings → Variables → Actions)
  DOCKERHUB_NAMESPACE: marianora
  DOCKERFILE_DIR: python-api
  # IMAGE_NAME: python-api

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolver variables (inputs/variables/env)
        id: vars
        env:
          # Inputs
          IN_DOCKERFILE_DIR: ${{ github.event.inputs.dockerfile_dir }}
          IN_NAMESPACE: ${{ github.event.inputs.dockerhub_namespace }}
          IN_IMAGE_NAME: ${{ github.event.inputs.image_name }}
          # Repo Variables (Actions → Variables)
          VARS_DOCKERFILE_DIR: ${{ vars.DOCKERFILE_DIR }}
          VARS_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE }}
          VARS_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          # Env
          ENV_DOCKERFILE_DIR: ${{ env.DOCKERFILE_DIR }}
          ENV_NAMESPACE: ${{ env.DOCKERHUB_NAMESPACE }}
          ENV_IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          DOCKERFILE_DIR="${IN_DOCKERFILE_DIR:-${VARS_DOCKERFILE_DIR:-${ENV_DOCKERFILE_DIR:-python-api}}}"
          NAMESPACE="${IN_NAMESPACE:-${VARS_NAMESPACE:-${ENV_NAMESPACE}}}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          IMAGE_NAME="${IN_IMAGE_NAME:-${VARS_IMAGE_NAME:-${ENV_IMAGE_NAME:-$REPO_NAME}}}"

          echo "dockerfile_dir=$DOCKERFILE_DIR" >> "$GITHUB_OUTPUT"
          echo "namespace=$NAMESPACE"           >> "$GITHUB_OUTPUT"
          echo "image_name=$IMAGE_NAME"         >> "$GITHUB_OUTPUT"

          echo "Usando:"
          echo "  DOCKERFILE_DIR=$DOCKERFILE_DIR"
          echo "  NAMESPACE=$NAMESPACE"
          echo "  IMAGE_NAME=$IMAGE_NAME"

      - name: Set up QEMU (opcional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Docker Hub login
        if: ${{ github.event_name != 'pull_request' && steps.vars.outputs.namespace != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.namespace }}/${{ steps.vars.outputs.image_name }}
          tags: |
            # latest en main (push)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
            # tag por SHA
            type=sha,format=long
            # si se pushea un tag vX.Y.Z
            type=ref,event=tag

      - name: Build (PR) o Build & Push (main/tags)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.vars.outputs.dockerfile_dir }}
          file: ${{ steps.vars.outputs.dockerfile_dir }}/Dockerfile
          # En PR NO hace push, en main/tags SÍ
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: linux/amd64,linux/arm64   # descomentar si querés multi-arch
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

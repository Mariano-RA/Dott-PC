name: Publish python-api image

on:
  push:
    branches: ["main"]
    paths:
      - "python-api/**"
      - ".github/workflows/python-ci.yml"
    tags:
      - "v*"
  pull_request:
    branches: ["main"]
    paths:
      - "python-api/**"
      - ".github/workflows/python-ci.yml"
  workflow_dispatch:
    inputs:
      dockerfile_dir:
        description: "Carpeta donde está el Dockerfile"
        required: false
        default: "python-api"
      dockerhub_namespace:
        description: "Namespace de Docker Hub (usuario/organización)"
        required: false
        default: "marianora"
      image_name:
        description: "Nombre de imagen (si vacío usa el nombre del repo)"
        required: false
        default: ""

env:
  DOCKERHUB_NAMESPACE: marianora
  DOCKERFILE_DIR: python-api
  # IMAGE_NAME: python-api

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolver variables (inputs/variables/env)
        id: vars
        env:
          IN_DOCKERFILE_DIR: ${{ github.event.inputs.dockerfile_dir }}
          IN_NAMESPACE: ${{ github.event.inputs.dockerhub_namespace }}
          IN_IMAGE_NAME: ${{ github.event.inputs.image_name }}
          VARS_DOCKERFILE_DIR: ${{ vars.DOCKERFILE_DIR }}
          VARS_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE }}
          VARS_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          ENV_DOCKERFILE_DIR: ${{ env.DOCKERFILE_DIR }}
          ENV_NAMESPACE: ${{ env.DOCKERHUB_NAMESPACE }}
          ENV_IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          DOCKERFILE_DIR="${IN_DOCKERFILE_DIR:-${VARS_DOCKERFILE_DIR:-${ENV_DOCKERFILE_DIR:-python-api}}}"
          NAMESPACE="${IN_NAMESPACE:-${VARS_NAMESPACE:-${ENV_NAMESPACE}}}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          IMAGE_NAME="${IN_IMAGE_NAME:-${VARS_IMAGE_NAME:-${ENV_IMAGE_NAME:-$REPO_NAME}}}"

          echo "dockerfile_dir=$DOCKERFILE_DIR" >> "$GITHUB_OUTPUT"
          echo "namespace=$NAMESPACE"           >> "$GITHUB_OUTPUT"
          echo "image_name=$IMAGE_NAME"         >> "$GITHUB_OUTPUT"

          echo "Usando:"
          echo "  DOCKERFILE_DIR=$DOCKERFILE_DIR"
          echo "  NAMESPACE=$NAMESPACE"
          echo "  IMAGE_NAME=$IMAGE_NAME"

      - name: Mostrar recursos del runner
        run: |
          echo "== Memoria ==" && free -h || true
          echo "== CPU cores ==" && nproc
          echo "== Disco ==" && df -h
          echo "== Tamaño del contexto =="
          du -sh "${{ steps.vars.outputs.dockerfile_dir }}" | cat

      # QEMU solo si vas a multi-arch. Si no, dejalo comentado.
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # Builder con paralelismo bajo para reducir RAM pico
      - name: Set up Docker Buildx (low parallelism)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          buildkitd-config-inline: |
            # /etc/buildkit/buildkitd.toml
            [worker.oci]
              max-parallelism = 1
            [[worker.oci.gcpolicy]]
              all = true
              keepDuration = "168h"
              reservedSpace = "3GB"
              maxUsedSpace = "20GB"

      - name: Docker Hub login
        if: ${{ github.event_name != 'pull_request' && steps.vars.outputs.namespace != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.namespace }}/${{ steps.vars.outputs.image_name }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
            type=sha,format=long
            type=ref,event=tag

      - name: Build (PR) o Build & Push (main/tags)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.vars.outputs.dockerfile_dir }}
          file: ${{ steps.vars.outputs.dockerfile_dir }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: linux/amd64,linux/arm64   # solo si necesitás multi-arch
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Cache GHA en modo 'min' para reducir uso de memoria
          cache-from: type=gha
          cache-to: type=gha,mode=min
          # evitar trabajo extra del builder
          provenance: false
          sbom: false
          # logs más verbosos sin usar 'progress' (no es input válido)
          build-args: |
            BUILDKIT_PROGRESS=plain

      - name: Logs de BuildKit si falla
        if: failure()
        run: |
          echo "=== Contenedores activos ==="
          docker ps -a || true
          BK=$(docker ps -a --filter "name=buildx_buildkit" --format "{{.Names}}" | head -n1)
          if [ -n "$BK" ]; then
            echo "=== Últimos logs de $BK ==="
            docker logs "$BK" --since 30m || true
          fi

name: Docker (python-api → Docker Hub)

on:
  push:
    branches: ["main"]
    paths:
      - "python-api/**"
      - ".github/workflows/docker-python-api.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "python-api/**"
      - ".github/workflows/docker-python-api.yml"

env:
  REGISTRY: docker.io
  DOCKERHUB_NAMESPACE: marianora
  IMAGE_NAME: dott-python
  CONTEXT_DIR: python-api

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: docker-python-api
      cancel-in-progress: true

    # Para Docker Hub no hace falta "packages: write".
    # Dejamos mínimos permisos.
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Buildx para multi-plataforma y cache GHA
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login en Docker Hub (no corre en PR)
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Metadatos: genera tags/labels (latest, sha y semver si hay tag)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=semver,pattern={{version}}

      # Build & Push con Buildx (sin provenance/SBOM para evitar EOF)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.CONTEXT_DIR }}
          file: ./${{ env.CONTEXT_DIR }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false   # ← evita el error EOF que viste
          sbom: false         # ← opcional, también desactiva SBOM
